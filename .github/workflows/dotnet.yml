# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Continuous-integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
          java-version: 17
          distribution: 'zulu'
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Checkout code
      uses: actions/checkout@v2
        
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore Dependencies
      run: dotnet restore
      working-directory: GymWorkDisclosed
    
    - name: Build Projects
      run: dotnet build --no-restore
      working-directory: GymWorkDisclosed
    


    
  test:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      packages: write
    

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: GymWorkDisclosed
        
      - name: Test Projects
        run: dotnet test --logger "trx;LogFileName=testresult-unittests.trx"
        working-directory: GymWorkDisclosed/BusinessLogicTests
        
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with: 
          name: gymworkdisclosed-unit-tests
          path: "**/testresult-unittests.trx"
          reporter: dotnet-trx
          fail-on-error: 'true'
        
  integration-test:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      packages: write
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: GymWorkDisclosed

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: '8.0'
          mysql database: 'GymWorkTestDB'
          mysql root password: 'rootpassword'
        
        
      - name: Integration Test Projects
        run: dotnet test --logger "trx;LogFileName=testresult-integration.trx"
        working-directory: GymWorkDisclosed/IntegrationTests
        env:
         ASPNETCORE_ENVIRONMENT: "Testing"

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with: 
          name: gymworkdisclosed-integrationtest-tests
          path: "**/testresult-integration.trx"
          reporter: dotnet-trx
          fail-on-error: 'true'
  
  analyse:
    runs-on: ubuntu-latest
    needs: integration-test

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Checkout code
        uses: actions/checkout@v2

      
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
         dotnet-version: 7.0.x

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: GymWorkDisclosed

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: 'GymWorkTestDB'
          mysql root password: 'rootpassword'


      - name: Build Projects
        run: dotnet build --no-restore
        working-directory: GymWorkDisclosed
      
      - name: Analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-coverage
          pushd GymWorkDisclosed
          ~/.sonar/scanner/dotnet-sonarscanner begin /k:"${{secrets.PROJECT_KEY }}" /o:"${{secrets.ORG_KEY }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url=https://sonarcloud.io /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build --no-incremental
          dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'
          ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          popd


  deploy:
    runs-on: ubuntu-latest
    needs: analyse

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Build Frontend
      run: docker build -t sielpoppythornl/s3ip-web-app:frontend GymWorkDisclosedFront/gymworkdisclosedfront

    - name: Build Backend
      run: docker build -t sielpoppythornl/s3ip-backend GymWorkDisclosed
      

    - name: Log in to the docker hub
      uses: docker/login-action@v3
      with:
        username: sielpoppythornl
        password: ${{ secrets.DOCKERPASSWORD }}

    - name: Push Backend Docker Image to docker hub
      run: docker push sielpoppythornl/s3ip-backend

    - name: Push Frontend Docker Image to docker hub
      run: docker push sielpoppythornl/s3ip-web-app:frontend
    

      
  
