# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: GymWorkDisclosedBuildAndTest

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
          java-version: 17
          distribution: 'zulu'
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
        
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore Dependencies
      run: dotnet restore
      working-directory: GymWorkDisclosed
    
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ~/.sonar/scanner
    - name: Build Projects
      run: dotnet build --no-restore
      working-directory: GymWorkDisclosed
        
    - name: Sonarcloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ~/.sonar/scanner/dotnet-sonarscanner begin /k:"${{secrets.PROJECT_KEY }}" /o:"${{secrets.ORG_KEY }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build --no-restore -c Release GymWorkDisclosed
        ~/.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        

    
  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: GymWorkDisclosed
        
      - name: Test Projects
        run: dotnet test --verbosity normal
        working-directory: GymWorkDisclosed/BusinessLogicTests
  integration-test:
    needs: build
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: GymWorkTestDB 
        ports:
          - "5053:3306"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore Dependencies
        run: dotnet restore
        working-directory: GymWorkDisclosed
        
      - name: Integration Test Projects
        run: dotnet test --verbosity normal
        working-directory: GymWorkDisclosed/IntegrationTests
